resource: https://www.baeldung.com/linux/uncomplicated-firewall#:~:text=The%20Uncomplicated%20Firewall%20(UFW)%20is,with%20an%20optimal%20default%20configuration.

# ufw status verbose

# ufw disable
# ufw default deny incoming
# ufw default allow outgoing
# ufw app list
# ufw app info "Nginx HTTP"
Enable Application Profiles
# ufw allow "OpenSSH"
# ufw allow "Apache Full"

UFW is now ready-to-use for our test case. Let’s enable it and check its status:
# ufw enable

# ufw status verbose


# tail -f /var/log/ufw.log

using nmap to scan the server ports from a computer outside the server’s network:
nmap  nmap 3.83.227.12
output:
Starting Nmap 7.80 ( https://nmap.org ) at 2023-04-20 15:18 WAT
Nmap scan report for ec2-3-83-227-12.compute-1.amazonaws.com (3.83.227.12)
Host is up (0.24s latency).
Not shown: 996 closed ports
PORT    STATE    SERVICE
22/tcp  open     ssh
25/tcp  filtered smtp
80/tcp  open     http
587/tcp filtered submission


# ufw logging off
Logging disabled


List All Rules and Delete a Rule
ufw status numbered

Output:
Status: active
 
     To                         Action      From
     --                         ------      ----
[ 1] Apache Full                ALLOW IN    Anywhere                  
[ 2] OpenSSH                    ALLOW IN    Anywhere                  
[ 3] Apache Full (v6)           ALLOW IN    Anywhere (v6)             
[ 4] OpenSSH (v6)               ALLOW IN    Anywhere (v6) 

In this case, we can, for example, eliminate rules 3 and 4 since we’re not using IPv6. But there isn’t a function to remove multiple rules at once, so we must remove one rule at a time. We should be careful to remove the rules from the highest number to the lowest, so the other rules won’t change after the deletion:
We should be careful to remove the rules from the highest number to the lowest, so the other rules won’t change after the deletion:


ufw delete 4
ufw delete 3

Enable Ports or a Range of Ports Without an Application Profile
ufw allow 80/tcp


telnet is a very good tool to check if sockets are open with telnet IP PORT

telnet 3.83.227.12  22

We can also specify a range of ports.
Let’s take, for example, the case of a WebRTC live streaming server that requires ports 5000 to 65000 to be opened on UDP protocol:

ufw allow 5000:65000/udp

if we don’t have an application profile but know the service name, we can specify that. In such a case, UFW will use the standard ports for that service. Let’s say we want to open ports for an FTP server (whose standard port is 21)
ufw allow ftp

To see the list of all supported services, we can inspect the /etc/services file:

 Restrict Allowed IPs
In many situations, we want to restrict access to services to specific IPs. For example, let’s limit SSH access (port 22) only to IP 1.2.3.4:
ufw allow from 1.2.3.4 proto tcp to any port 22

Limit the Number of Connections to a Given Port Over Time
This helps prevent brute force attacks.

Let’s reopen SSH connections to all IPs, but this time, with rate-limiting:
ufw limit ssh